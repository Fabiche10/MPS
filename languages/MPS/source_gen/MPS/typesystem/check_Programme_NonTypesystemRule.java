package MPS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_Programme_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Programme_NonTypesystemRule() {
  }
  public void applyRule(final SNode programme, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Set<String> identifiants = SetSequence.fromSet(new HashSet<String>());
    for (SNode variable : SNodeOperations.ofConcept(SLinkOperations.getChildren(programme, LINKS.instructions$r_c3), CONCEPTS.DeclarationVariable$rV)) {
      if (SetSequence.fromSet(identifiants).contains(SPropertyOperations.getString(variable, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(variable, "identifiant déjà défini " + SPropertyOperations.getString(variable, PROPS.name$MnvL), "r:2b8060cb-a9d0-4eff-bb46-cb6c8f2131b7(MPS.typesystem)", "325614642034975815", null, errorTarget);
        }
      }
      SetSequence.fromSet(identifiants).addElement(SPropertyOperations.getString(variable, PROPS.name$MnvL));
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Programme$to;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink instructions$r_c3 = MetaAdapterFactory.getContainmentLink(0x193ba053c75c4c68L, 0x86ae9cea4678ede8L, 0x2d7e4af03a7f4b95L, 0x2d7e4af03a7f4b98L, "instructions");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DeclarationVariable$rV = MetaAdapterFactory.getConcept(0x193ba053c75c4c68L, 0x86ae9cea4678ede8L, 0x2d7e4af03a7f4b92L, "MPS.structure.DeclarationVariable");
    /*package*/ static final SConcept Programme$to = MetaAdapterFactory.getConcept(0x193ba053c75c4c68L, 0x86ae9cea4678ede8L, 0x2d7e4af03a7f4b95L, "MPS.structure.Programme");
  }
}
